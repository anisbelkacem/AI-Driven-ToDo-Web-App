{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\todo_app\\\\frontend\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { List, ListItem, Checkbox, IconButton, ListItemText, Paper, Typography, Divider } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  tasks,\n  onUpdate,\n  onDelete\n}) => {\n  _s();\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState(null);\n  const [editedTitle, setEditedTitle] = useState('');\n  const [taskToDelete, setTaskToDelete] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleEditClick = task => {\n    setEditingTask(task);\n    setEditedTitle(task.title);\n  };\n  const handleSaveEdit = async () => {\n    if (editingTask) {\n      setIsProcessing(true);\n      try {\n        await onUpdate({\n          ...editingTask,\n          title: editedTitle\n        });\n        setEditingTask(null);\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingTask(null);\n  };\n  const handleDeleteClick = id => {\n    setTaskToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n  const handleConfirmDelete = async () => {\n    if (taskToDelete !== null) {\n      setIsProcessing(true);\n      try {\n        await onDelete(taskToDelete);\n      } finally {\n        setIsProcessing(false);\n        setDeleteDialogOpen(false);\n      }\n    }\n  };\n  const handleToggleComplete = async task => {\n    setIsProcessing(true);\n    try {\n      await onUpdate({\n        ...task,\n        completed: !task.completed\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  if (!tasks.length) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        borderRadius: 2,\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"No tasks yet. Add your first task!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 2,\n    sx: {\n      p: 0,\n      borderRadius: 2,\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: tasks.map((task, idx) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          sx: {\n            bgcolor: task.completed ? '#e0e7ff' : '#fff',\n            borderRadius: 2,\n            mb: 1,\n            boxShadow: 0,\n            transition: 'background 0.2s'\n          },\n          secondaryAction: /*#__PURE__*/_jsxDEV(IconButton, {\n            edge: \"end\",\n            color: \"error\",\n            onClick: () => handleDeleteClick(task.id),\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            edge: \"start\",\n            checked: task.completed,\n            onChange: () => handleToggleComplete(task),\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                textDecoration: task.completed ? 'line-through' : 'none',\n                color: task.completed ? 'text.secondary' : 'text.primary',\n                fontWeight: 500\n              },\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), idx < tasks.length - 1 && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 40\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"5DiqbQkDDbh7SyUqjQKkPdcDCD8=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","List","ListItem","Checkbox","IconButton","ListItemText","Paper","Typography","Divider","DeleteIcon","jsxDEV","_jsxDEV","TaskList","tasks","onUpdate","onDelete","_s","deleteDialogOpen","setDeleteDialogOpen","editingTask","setEditingTask","editedTitle","setEditedTitle","taskToDelete","setTaskToDelete","isProcessing","setIsProcessing","handleEditClick","task","title","handleSaveEdit","handleCancelEdit","handleDeleteClick","id","handleConfirmDelete","handleToggleComplete","completed","length","elevation","sx","p","borderRadius","mt","children","color","align","fileName","_jsxFileName","lineNumber","columnNumber","map","idx","Fragment","bgcolor","mb","boxShadow","transition","secondaryAction","edge","onClick","checked","onChange","primary","textDecoration","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/GIGABYTE/todo_app/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Task } from '../models/Task';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Checkbox,\r\n  IconButton,\r\n  ListItemText,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Divider,\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ninterface TaskListProps {\r\n  tasks: Task[];\r\n  onToggle: (task: Task) => Promise<void>;\r\n  onUpdate: (task: Task) => Promise<void>;\r\n  onDelete: (id: number) => Promise<void>;\r\n}\r\n\r\nconst TaskList = ({ tasks, onUpdate, onDelete }: TaskListProps) => {\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [editedTitle, setEditedTitle] = useState('');\r\n  const [taskToDelete, setTaskToDelete] = useState<number | null>(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const handleEditClick = (task: Task) => {\r\n    setEditingTask(task);\r\n    setEditedTitle(task.title);\r\n  };\r\n\r\n  const handleSaveEdit = async () => {\r\n    if (editingTask) {\r\n      setIsProcessing(true);\r\n      try {\r\n        await onUpdate({ ...editingTask, title: editedTitle });\r\n        setEditingTask(null);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingTask(null);\r\n  };\r\n\r\n  const handleDeleteClick = (id: number) => {\r\n    setTaskToDelete(id);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    if (taskToDelete !== null) {\r\n      setIsProcessing(true);\r\n      try {\r\n        await onDelete(taskToDelete);\r\n      } finally {\r\n        setIsProcessing(false);\r\n        setDeleteDialogOpen(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleToggleComplete = async (task: Task) => {\r\n    setIsProcessing(true);\r\n    try {\r\n      await onUpdate({ ...task, completed: !task.completed });\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  if (!tasks.length) {\r\n    return (\r\n      <Paper elevation={2} sx={{ p: 3, borderRadius: 2, mt: 2 }}>\r\n        <Typography color=\"text.secondary\" align=\"center\">\r\n          No tasks yet. Add your first task!\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper elevation={2} sx={{ p: 0, borderRadius: 2, mt: 2 }}>\r\n      <List>\r\n        {tasks.map((task, idx) => (\r\n          <React.Fragment key={task.id}>\r\n            <ListItem\r\n              sx={{\r\n                bgcolor: task.completed ? '#e0e7ff' : '#fff',\r\n                borderRadius: 2,\r\n                mb: 1,\r\n                boxShadow: 0,\r\n                transition: 'background 0.2s',\r\n              }}\r\n              secondaryAction={\r\n                <IconButton edge=\"end\" color=\"error\" onClick={() => handleDeleteClick(task.id!)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              }\r\n            >\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={task.completed}\r\n                onChange={() => handleToggleComplete(task)}\r\n                color=\"primary\"\r\n              />\r\n              <ListItemText\r\n                primary={\r\n                  <Typography\r\n                    sx={{\r\n                      textDecoration: task.completed ? 'line-through' : 'none',\r\n                      color: task.completed ? 'text.secondary' : 'text.primary',\r\n                      fontWeight: 500,\r\n                    }}\r\n                  >\r\n                    {task.title}\r\n                  </Typography>\r\n                }\r\n              />\r\n            </ListItem>\r\n            {idx < tasks.length - 1 && <Divider />}\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TaskList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}