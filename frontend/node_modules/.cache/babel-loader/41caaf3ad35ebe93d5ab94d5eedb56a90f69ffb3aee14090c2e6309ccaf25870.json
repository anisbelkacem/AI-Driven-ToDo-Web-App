{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport * as taskApi from '../services/api';\nexport const useTasks = () => {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    data: tasks = [],\n    refetch\n  } = useQuery({\n    queryKey: ['tasks'],\n    queryFn: taskApi.getTasks\n  });\n\n  // Add task mutation (accepts Task without id)\n  const addMutation = useMutation({\n    mutationFn: task => taskApi.addTask(task),\n    onSuccess: () => queryClient.invalidateQueries({\n      queryKey: ['tasks']\n    })\n  });\n\n  // Update task mutation (requires full Task with id)\n  const updateMutation = useMutation({\n    mutationFn: task => taskApi.updateTask(task),\n    onSuccess: () => queryClient.invalidateQueries({\n      queryKey: ['tasks']\n    })\n  });\n\n  // Delete task mutation (accepts just id)\n  const deleteMutation = useMutation({\n    mutationFn: id => taskApi.deleteTask(id),\n    onSuccess: () => queryClient.invalidateQueries({\n      queryKey: ['tasks']\n    })\n  });\n  const refrech = useMutation({\n    mutationFn: () => taskApi.getTasks(),\n    onSuccess: () => queryClient.invalidateQueries({\n      queryKey: ['tasks']\n    })\n  });\n  return {\n    tasks,\n    addTask: addMutation.mutate,\n    toggleTask: updateMutation.mutate,\n    deleteTask: deleteMutation.mutate,\n    updateTask: updateMutation.mutate,\n    refetchTasks: refrech.mutate,\n    isLoading: addMutation.isPending || updateMutation.isPending || deleteMutation.isPending\n  };\n};\n_s(useTasks, \"7EN3ZQjLOvRcZCvhlzv4o7nLmLo=\", false, function () {\n  return [useQueryClient, useQuery, useMutation, useMutation, useMutation, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","taskApi","useTasks","_s","queryClient","data","tasks","refetch","queryKey","queryFn","getTasks","addMutation","mutationFn","task","addTask","onSuccess","invalidateQueries","updateMutation","updateTask","deleteMutation","id","deleteTask","refrech","mutate","toggleTask","refetchTasks","isLoading","isPending"],"sources":["C:/Users/GIGABYTE/todo_app/frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport * as taskApi from '../services/api';\r\nimport { Task } from '../models/Task';\r\n\r\nexport const useTasks = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  const { data: tasks = [], refetch } = useQuery<Task[]>({\r\n    queryKey: ['tasks'],\r\n    queryFn: taskApi.getTasks\r\n  });\r\n\r\n  // Add task mutation (accepts Task without id)\r\n  const addMutation = useMutation({\r\n    mutationFn: (task: Omit<Task, 'id'>) => taskApi.addTask(task),\r\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['tasks'] })\r\n  });\r\n\r\n  // Update task mutation (requires full Task with id)\r\n  const updateMutation = useMutation({\r\n    mutationFn: (task: Task) => taskApi.updateTask(task),\r\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['tasks'] })\r\n  });\r\n\r\n  // Delete task mutation (accepts just id)\r\n  const deleteMutation = useMutation({\r\n    mutationFn: (id: number) => taskApi.deleteTask(id),\r\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['tasks'] })\r\n  });\r\n  const refrech = useMutation({\r\n    mutationFn: () => taskApi.getTasks(),\r\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['tasks'] })\r\n  });\r\n  return {\r\n    tasks,\r\n    addTask: addMutation.mutate,\r\n    toggleTask: updateMutation.mutate,\r\n    deleteTask: deleteMutation.mutate,\r\n    updateTask: updateMutation.mutate,\r\n    refetchTasks: refrech.mutate,\r\n    isLoading: addMutation.isPending || updateMutation.isPending || deleteMutation.isPending ,\r\n    \r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,OAAO,KAAKC,OAAO,MAAM,iBAAiB;AAG1C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,WAAW,GAAGJ,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEK,IAAI,EAAEC,KAAK,GAAG,EAAE;IAAEC;EAAQ,CAAC,GAAGT,QAAQ,CAAS;IACrDU,QAAQ,EAAE,CAAC,OAAO,CAAC;IACnBC,OAAO,EAAER,OAAO,CAACS;EACnB,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAGZ,WAAW,CAAC;IAC9Ba,UAAU,EAAGC,IAAsB,IAAKZ,OAAO,CAACa,OAAO,CAACD,IAAI,CAAC;IAC7DE,SAAS,EAAEA,CAAA,KAAMX,WAAW,CAACY,iBAAiB,CAAC;MAAER,QAAQ,EAAE,CAAC,OAAO;IAAE,CAAC;EACxE,CAAC,CAAC;;EAEF;EACA,MAAMS,cAAc,GAAGlB,WAAW,CAAC;IACjCa,UAAU,EAAGC,IAAU,IAAKZ,OAAO,CAACiB,UAAU,CAACL,IAAI,CAAC;IACpDE,SAAS,EAAEA,CAAA,KAAMX,WAAW,CAACY,iBAAiB,CAAC;MAAER,QAAQ,EAAE,CAAC,OAAO;IAAE,CAAC;EACxE,CAAC,CAAC;;EAEF;EACA,MAAMW,cAAc,GAAGpB,WAAW,CAAC;IACjCa,UAAU,EAAGQ,EAAU,IAAKnB,OAAO,CAACoB,UAAU,CAACD,EAAE,CAAC;IAClDL,SAAS,EAAEA,CAAA,KAAMX,WAAW,CAACY,iBAAiB,CAAC;MAAER,QAAQ,EAAE,CAAC,OAAO;IAAE,CAAC;EACxE,CAAC,CAAC;EACF,MAAMc,OAAO,GAAGvB,WAAW,CAAC;IAC1Ba,UAAU,EAAEA,CAAA,KAAMX,OAAO,CAACS,QAAQ,CAAC,CAAC;IACpCK,SAAS,EAAEA,CAAA,KAAMX,WAAW,CAACY,iBAAiB,CAAC;MAAER,QAAQ,EAAE,CAAC,OAAO;IAAE,CAAC;EACxE,CAAC,CAAC;EACF,OAAO;IACLF,KAAK;IACLQ,OAAO,EAAEH,WAAW,CAACY,MAAM;IAC3BC,UAAU,EAAEP,cAAc,CAACM,MAAM;IACjCF,UAAU,EAAEF,cAAc,CAACI,MAAM;IACjCL,UAAU,EAAED,cAAc,CAACM,MAAM;IACjCE,YAAY,EAAEH,OAAO,CAACC,MAAM;IAC5BG,SAAS,EAAEf,WAAW,CAACgB,SAAS,IAAIV,cAAc,CAACU,SAAS,IAAIR,cAAc,CAACQ;EAEjF,CAAC;AACH,CAAC;AAACxB,EAAA,CAvCWD,QAAQ;EAAA,QACCF,cAAc,EAEIF,QAAQ,EAM1BC,WAAW,EAMRA,WAAW,EAMXA,WAAW,EAIlBA,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}