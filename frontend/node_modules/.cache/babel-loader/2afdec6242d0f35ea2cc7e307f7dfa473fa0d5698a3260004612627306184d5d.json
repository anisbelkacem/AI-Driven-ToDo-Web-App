{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\todo_app\\\\frontend\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { List, ListItem, Checkbox, IconButton, ListItemText, Paper, Typography, Box, Divider, Tooltip, TextField, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TaskList = ({\n  tasks,\n  onUpdate,\n  onDelete,\n  refetchTasks\n}) => {\n  _s();\n  const [editingTask, setEditingTask] = useState(null);\n  const [editedTitle, setEditedTitle] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // State for delete confirmation dialog\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [taskToDelete, setTaskToDelete] = useState(null);\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [selectedDay, setSelectedDay] = useState('');\n  const availableDates = Array.from(new Set(tasks.map(t => t.date).filter(Boolean))).sort();\n  const availableMonths = Array.from(new Set(tasks.map(t => t.date && t.date.slice(0, 7)).filter(Boolean))).sort();\n  const handleEditClick = task => {\n    setEditingTask(task);\n    setEditedTitle(task.title);\n  };\n  const handleSaveEdit = async () => {\n    if (editingTask) {\n      setIsProcessing(true);\n      try {\n        await onUpdate({\n          ...editingTask,\n          title: editedTitle\n        });\n        setEditingTask(null);\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingTask(null);\n  };\n\n  // Open confirmation dialog\n  const handleDeleteClick = id => {\n    setTaskToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  // Confirm delete\n  const handleConfirmDelete = async () => {\n    if (taskToDelete !== null) {\n      setIsProcessing(true);\n      await onDelete(taskToDelete);\n      setIsProcessing(false);\n      setTaskToDelete(null);\n      setDeleteDialogOpen(false);\n    }\n  };\n\n  // Cancel delete\n  const handleCancelDelete = () => {\n    setTaskToDelete(null);\n    setDeleteDialogOpen(false);\n  };\n  const handleToggleComplete = async task => {\n    setIsProcessing(true);\n    try {\n      await onUpdate({\n        ...task,\n        completed: !task.completed\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Sort tasks by priority before rendering\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\n\n  // Filter tasks based on selected month and day\n  let filteredTasks = sortedTasks;\n  if (selectedMonth) {\n    filteredTasks = filteredTasks.filter(t => t.date && t.date.startsWith(selectedMonth));\n  }\n  if (selectedDay) {\n    filteredTasks = filteredTasks.filter(t => t.date === selectedDay);\n  }\n\n  // Handle drag end\n  const handleDragEnd = async result => {\n    if (!result.destination) return;\n    const reordered = Array.from(sortedTasks);\n    const [removed] = reordered.splice(result.source.index, 1);\n    reordered.splice(result.destination.index, 0, removed);\n\n    // Update priorities based on new order\n    for (let i = 0; i < reordered.length; i++) {\n      reordered[i].priority = i;\n    }\n\n    // Persist the new order in the backend\n    await axios.post('/api/tasks/reorder', reordered);\n\n    // Refresh the list\n    await refetchTasks();\n  };\n  if (!tasks.length) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        borderRadius: 2,\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"No tasks yet. Add your first task!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        label: \"Month\",\n        value: selectedMonth,\n        onChange: e => {\n          setSelectedMonth(e.target.value);\n          setSelectedDay('');\n        },\n        sx: {\n          minWidth: 140\n        },\n        SelectProps: {\n          native: true\n        },\n        InputLabelProps: {\n          shrink: true\n        } // <-- Add this line\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Months\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), availableMonths.map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, month, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        label: \"Day\",\n        value: selectedDay,\n        onChange: e => setSelectedDay(e.target.value),\n        sx: {\n          minWidth: 140\n        },\n        SelectProps: {\n          native: true\n        },\n        disabled: !selectedMonth,\n        InputLabelProps: {\n          shrink: true\n        } // <-- Add this line\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), availableDates.filter(date => date && date.startsWith(selectedMonth)).map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date.split('-')[2]\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 0,\n        borderRadius: 2,\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"task-list\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [filteredTasks.map((task, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id.toString(),\n              index: idx,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  sx: {\n                    bgcolor: task.completed ? '#f0f4ff' : '#fff',\n                    borderRadius: 2,\n                    mb: 1,\n                    boxShadow: 0,\n                    transition: 'background 0.2s'\n                  },\n                  secondaryAction: (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id) === task.id ? null : /*#__PURE__*/_jsxDEV(Box, {\n                    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: \"Edit\",\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        edge: \"end\",\n                        color: \"primary\",\n                        onClick: () => handleEditClick(task),\n                        children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 217,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 216,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 215,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: \"Delete\",\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        edge: \"end\",\n                        color: \"error\",\n                        onClick: () => handleDeleteClick(task.id),\n                        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 222,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 221,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 220,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 31\n                  }, this),\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      cursor: 'grab',\n                      mr: 1\n                    },\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(DragIndicatorIcon, {\n                      color: \"disabled\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 230,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                    edge: \"start\",\n                    checked: task.completed,\n                    onChange: () => handleToggleComplete(task),\n                    color: \"primary\",\n                    disabled: isProcessing || (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id) === task.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 27\n                  }, this), (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id) === task.id ? /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: 1\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(TextField, {\n                        variant: \"standard\",\n                        value: editedTitle,\n                        onChange: e => setEditedTitle(e.target.value),\n                        disabled: isProcessing,\n                        fullWidth: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 247,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                        color: \"success\",\n                        onClick: handleSaveEdit,\n                        disabled: isProcessing || !editedTitle.trim(),\n                        sx: {\n                          ml: 1\n                        },\n                        children: /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 260,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                        color: \"error\",\n                        onClick: handleCancelEdit,\n                        disabled: isProcessing,\n                        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 267,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 262,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 244,\n                    columnNumber: 29\n                  }, this) : /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Typography, {\n                      sx: {\n                        textDecoration: task.completed ? 'line-through' : 'none',\n                        color: task.completed ? 'text.secondary' : 'text.primary',\n                        fontWeight: 'normal'\n                      },\n                      children: task.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 275,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 25\n                }, this), idx < sortedTasks.length - 1 && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 58\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 23\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: deleteDialogOpen,\n      onClose: handleCancelDelete,\n      \"aria-labelledby\": \"confirm-delete-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"confirm-delete-title\",\n        children: \"Confirm Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure you want to delete this task?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCancelDelete,\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirmDelete,\n          color: \"error\",\n          autoFocus: true,\n          disabled: isProcessing,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TaskList, \"LNt6RSeViXNPgpi0E9wPn7yqY14=\");\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","List","ListItem","Checkbox","IconButton","ListItemText","Paper","Typography","Box","Divider","Tooltip","TextField","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","DeleteIcon","EditIcon","CheckIcon","CloseIcon","DragIndicatorIcon","DragDropContext","Droppable","Draggable","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","tasks","onUpdate","onDelete","refetchTasks","_s","editingTask","setEditingTask","editedTitle","setEditedTitle","isProcessing","setIsProcessing","deleteDialogOpen","setDeleteDialogOpen","taskToDelete","setTaskToDelete","selectedMonth","setSelectedMonth","selectedDay","setSelectedDay","availableDates","Array","from","Set","map","t","date","filter","Boolean","sort","availableMonths","slice","handleEditClick","task","title","handleSaveEdit","handleCancelEdit","handleDeleteClick","id","handleConfirmDelete","handleCancelDelete","handleToggleComplete","completed","sortedTasks","a","b","priority","filteredTasks","startsWith","handleDragEnd","result","destination","reordered","removed","splice","source","index","i","length","post","elevation","sx","p","borderRadius","mt","children","color","align","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","mb","select","label","value","onChange","e","target","minWidth","SelectProps","native","InputLabelProps","shrink","month","disabled","split","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","idx","draggableId","toString","draggableProps","bgcolor","boxShadow","transition","secondaryAction","edge","onClick","alignItems","cursor","mr","dragHandleProps","checked","primary","variant","fullWidth","trim","ml","textDecoration","fontWeight","placeholder","open","onClose","autoFocus","_c","$RefreshReg$"],"sources":["C:/Users/GIGABYTE/todo_app/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Task } from '../models/Task';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Checkbox,\r\n  IconButton,\r\n  ListItemText,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Divider,\r\n  Tooltip,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button,\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';\r\nimport axios from 'axios';\r\n\r\ninterface TaskListProps {\r\n  tasks: Task[];\r\n  onToggle: (task: Task) => Promise<void>;\r\n  onUpdate: (task: Task) => Promise<void>;\r\n  onDelete: (id: number) => Promise<void>;\r\n  refetchTasks: () => void;\r\n}\r\n\r\nexport const TaskList = ({ tasks, onUpdate, onDelete, refetchTasks }: TaskListProps) => {\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [editedTitle, setEditedTitle] = useState('');\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  // State for delete confirmation dialog\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [taskToDelete, setTaskToDelete] = useState<number | null>(null);\r\n\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [selectedDay, setSelectedDay] = useState('');\r\n\r\n  const availableDates = Array.from(new Set(tasks.map(t => t.date).filter(Boolean))).sort();\r\n  const availableMonths = Array.from(\r\n    new Set(tasks.map(t => t.date && t.date.slice(0, 7)).filter(Boolean))\r\n  ).sort();\r\n\r\n  const handleEditClick = (task: Task) => {\r\n    setEditingTask(task);\r\n    setEditedTitle(task.title);\r\n  };\r\n\r\n  const handleSaveEdit = async () => {\r\n    if (editingTask) {\r\n      setIsProcessing(true);\r\n      try {\r\n        await onUpdate({ ...editingTask, title: editedTitle });\r\n        setEditingTask(null);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingTask(null);\r\n  };\r\n\r\n  // Open confirmation dialog\r\n  const handleDeleteClick = (id: number) => {\r\n    setTaskToDelete(id);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  // Confirm delete\r\n  const handleConfirmDelete = async () => {\r\n    if (taskToDelete !== null) {\r\n      setIsProcessing(true);\r\n      await onDelete(taskToDelete);\r\n      setIsProcessing(false);\r\n      setTaskToDelete(null);\r\n      setDeleteDialogOpen(false);\r\n    }\r\n  };\r\n\r\n  // Cancel delete\r\n  const handleCancelDelete = () => {\r\n    setTaskToDelete(null);\r\n    setDeleteDialogOpen(false);\r\n  };\r\n\r\n  const handleToggleComplete = async (task: Task) => {\r\n    setIsProcessing(true);\r\n    try {\r\n      await onUpdate({ ...task, completed: !task.completed });\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Sort tasks by priority before rendering\r\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\r\n\r\n  // Filter tasks based on selected month and day\r\n  let filteredTasks = sortedTasks;\r\n  if (selectedMonth) {\r\n    filteredTasks = filteredTasks.filter(t => t.date && t.date.startsWith(selectedMonth));\r\n  }\r\n  if (selectedDay) {\r\n    filteredTasks = filteredTasks.filter(t => t.date === selectedDay);\r\n  }\r\n\r\n  // Handle drag end\r\n  const handleDragEnd = async (result: DropResult) => {\r\n    if (!result.destination) return;\r\n    const reordered = Array.from(sortedTasks);\r\n    const [removed] = reordered.splice(result.source.index, 1);\r\n    reordered.splice(result.destination.index, 0, removed);\r\n\r\n    // Update priorities based on new order\r\n    for (let i = 0; i < reordered.length; i++) {\r\n      reordered[i].priority = i;\r\n    }\r\n\r\n    // Persist the new order in the backend\r\n    await axios.post('/api/tasks/reorder', reordered);\r\n\r\n    // Refresh the list\r\n    await refetchTasks();\r\n  };\r\n\r\n  if (!tasks.length) {\r\n    return (\r\n      <Paper elevation={2} sx={{ p: 3, borderRadius: 2, mt: 2 }}>\r\n        <Typography color=\"text.secondary\" align=\"center\">\r\n          No tasks yet. Add your first task!\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\r\n        <TextField\r\n          select\r\n          label=\"Month\"\r\n          value={selectedMonth}\r\n          onChange={e => {\r\n            setSelectedMonth(e.target.value);\r\n            setSelectedDay('');\r\n          }}\r\n          sx={{ minWidth: 140 }}\r\n          SelectProps={{ native: true }}\r\n          InputLabelProps={{ shrink: true }} // <-- Add this line\r\n        >\r\n          <option value=\"\">All Months</option>\r\n          {availableMonths.map(month => (\r\n            <option key={month} value={month}>\r\n              {month}\r\n            </option>\r\n          ))}\r\n        </TextField>\r\n        <TextField\r\n          select\r\n          label=\"Day\"\r\n          value={selectedDay}\r\n          onChange={e => setSelectedDay(e.target.value)}\r\n          sx={{ minWidth: 140 }}\r\n          SelectProps={{ native: true }}\r\n          disabled={!selectedMonth}\r\n          InputLabelProps={{ shrink: true }} // <-- Add this line\r\n        >\r\n          <option value=\"\">All Days</option>\r\n          {availableDates\r\n            .filter(date => date && date.startsWith(selectedMonth))\r\n            .map(date => (\r\n              <option key={date} value={date}>\r\n                {date.split('-')[2]}\r\n              </option>\r\n            ))}\r\n        </TextField>\r\n      </Box>\r\n      <Paper elevation={2} sx={{ p: 0, borderRadius: 2, mt: 2 }}>\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          <Droppable droppableId=\"task-list\">\r\n            {(provided) => (\r\n              <List ref={provided.innerRef} {...provided.droppableProps}>\r\n                {filteredTasks.map((task, idx) => (\r\n                  <Draggable key={task.id} draggableId={task.id.toString()} index={idx}>\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        // Do NOT spread dragHandleProps here!\r\n                      >\r\n                        <ListItem\r\n                          sx={{\r\n                            bgcolor: task.completed ? '#f0f4ff' : '#fff',\r\n                            borderRadius: 2,\r\n                            mb: 1,\r\n                            boxShadow: 0,\r\n                            transition: 'background 0.2s',\r\n                          }}\r\n                          secondaryAction={\r\n                            editingTask?.id === task.id ? null : (\r\n                              <Box>\r\n                                <Tooltip title=\"Edit\">\r\n                                  <IconButton edge=\"end\" color=\"primary\" onClick={() => handleEditClick(task)}>\r\n                                    <EditIcon />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Delete\">\r\n                                  <IconButton edge=\"end\" color=\"error\" onClick={() => handleDeleteClick(task.id!)}>\r\n                                    <DeleteIcon />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                              </Box>\r\n                            )\r\n                          }\r\n                        >\r\n                          {/* Drag handle icon */}\r\n                          <Box\r\n                            sx={{ display: 'flex', alignItems: 'center', cursor: 'grab', mr: 1 }}\r\n                            {...provided.dragHandleProps} // <-- Attach dragHandleProps here\r\n                          >\r\n                            <DragIndicatorIcon color=\"disabled\" />\r\n                          </Box>\r\n                          <Checkbox\r\n                            edge=\"start\"\r\n                            checked={task.completed}\r\n                            onChange={() => handleToggleComplete(task)}\r\n                            color=\"primary\"\r\n                            disabled={isProcessing || editingTask?.id === task.id}\r\n                          />\r\n                          {editingTask?.id === task.id ? (\r\n                            <ListItemText\r\n                              primary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                  <TextField\r\n                                    variant=\"standard\"\r\n                                    value={editedTitle}\r\n                                    onChange={(e) => setEditedTitle(e.target.value)}\r\n                                    disabled={isProcessing}\r\n                                    fullWidth\r\n                                  />\r\n                                  <IconButton\r\n                                    color=\"success\"\r\n                                    onClick={handleSaveEdit}\r\n                                    disabled={isProcessing || !editedTitle.trim()}\r\n                                    sx={{ ml: 1 }}\r\n                                  >\r\n                                    <CheckIcon />\r\n                                  </IconButton>\r\n                                  <IconButton\r\n                                    color=\"error\"\r\n                                    onClick={handleCancelEdit}\r\n                                    disabled={isProcessing}\r\n                                  >\r\n                                    <CloseIcon />\r\n                                  </IconButton>\r\n                                </Box>\r\n                              }\r\n                            />\r\n                          ) : (\r\n                            <ListItemText\r\n                              primary={\r\n                                <Typography\r\n                                  sx={{\r\n                                    textDecoration: task.completed ? 'line-through' : 'none',\r\n                                    color: task.completed ? 'text.secondary' : 'text.primary',\r\n                                    fontWeight: 'normal',\r\n                                  }}\r\n                                >\r\n                                  {task.title}\r\n                                </Typography>\r\n                              }\r\n                            />\r\n                          )}\r\n                        </ListItem>\r\n                        {idx < sortedTasks.length - 1 && <Divider />} {/* Use sortedTasks here */}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </List>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </Paper>\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={handleCancelDelete}\r\n        aria-labelledby=\"confirm-delete-title\"\r\n      >\r\n        <DialogTitle id=\"confirm-delete-title\">Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete this task?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancelDelete} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleConfirmDelete} color=\"error\" autoFocus disabled={isProcessing}>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}