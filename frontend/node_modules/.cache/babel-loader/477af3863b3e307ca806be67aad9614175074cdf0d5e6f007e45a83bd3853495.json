{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\todo_app\\\\frontend\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { List, ListItem, Checkbox, IconButton, ListItemText, Paper, Typography, Box, Divider, Tooltip, TextField, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TaskList = ({\n  tasks,\n  onUpdate,\n  onDelete,\n  refetchTasks,\n  selectedMonth,\n  setSelectedMonth,\n  selectedDay,\n  setSelectedDay,\n  completionFilter,\n  setCompletionFilter\n}) => {\n  _s();\n  const [editingTask, setEditingTask] = useState(null);\n  const [editedTitle, setEditedTitle] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // State for delete confirmation dialog\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [taskToDelete, setTaskToDelete] = useState(null);\n  const availableDates = Array.from(new Set(tasks.map(t => t.date).filter(Boolean))).sort();\n  const availableMonths = Array.from(new Set(tasks.map(t => t.date && t.date.slice(0, 7)).filter(Boolean))).sort();\n  const handleEditClick = task => {\n    setEditingTask(task);\n    setEditedTitle(task.title);\n  };\n  const handleSaveEdit = async () => {\n    if (editingTask) {\n      setIsProcessing(true);\n      try {\n        await onUpdate({\n          ...editingTask,\n          title: editedTitle\n        });\n        setEditingTask(null);\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingTask(null);\n  };\n\n  // Open confirmation dialog\n  const handleDeleteClick = id => {\n    setTaskToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  // Confirm delete\n  const handleConfirmDelete = async () => {\n    if (taskToDelete !== null) {\n      setIsProcessing(true);\n      await onDelete(taskToDelete);\n      setIsProcessing(false);\n      setTaskToDelete(null);\n      setDeleteDialogOpen(false);\n    }\n  };\n\n  // Cancel delete\n  const handleCancelDelete = () => {\n    setTaskToDelete(null);\n    setDeleteDialogOpen(false);\n  };\n  const handleToggleComplete = async task => {\n    setIsProcessing(true);\n    try {\n      await onUpdate({\n        ...task,\n        completed: !task.completed\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Sort tasks by priority before rendering\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\n\n  // Filter tasks based on selected month and day\n  let filteredTasks = sortedTasks;\n  if (selectedMonth) {\n    filteredTasks = filteredTasks.filter(t => t.date && t.date.startsWith(selectedMonth));\n  }\n  if (selectedDay) {\n    filteredTasks = filteredTasks.filter(t => t.date === selectedDay);\n  }\n\n  // Filter tasks based on completion status\n  if (completionFilter === 'completed') {\n    filteredTasks = filteredTasks.filter(t => t.completed);\n  } else if (completionFilter === 'incomplete') {\n    filteredTasks = filteredTasks.filter(t => !t.completed);\n  }\n\n  // Handle drag end\n  const handleDragEnd = async result => {\n    if (!result.destination) return;\n    const reordered = Array.from(sortedTasks);\n    const [removed] = reordered.splice(result.source.index, 1);\n    reordered.splice(result.destination.index, 0, removed);\n\n    // Update priorities based on new order\n    for (let i = 0; i < reordered.length; i++) {\n      reordered[i].priority = i;\n    }\n\n    // Persist the new order in the backend\n    await axios.post('/api/tasks/reorder', reordered);\n\n    // Refresh the list\n    await refetchTasks();\n  };\n\n  // Count completed and incomplete tasks\n  const hasCompleted = sortedTasks.some(t => t.completed);\n  const hasIncomplete = sortedTasks.some(t => !t.completed);\n  if (!tasks.length) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        borderRadius: 2,\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"text.secondary\",\n        align: \"center\",\n        children: \"No tasks yet. Add your first task!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        label: \"Month\",\n        value: selectedMonth,\n        onChange: e => {\n          setSelectedMonth(e.target.value);\n          setSelectedDay('');\n        },\n        sx: {\n          minWidth: 140\n        },\n        SelectProps: {\n          native: true,\n          inputProps: {\n            'data-testid': 'month-filter-select' // Changed test ID to target select element\n          }\n        },\n        InputLabelProps: {\n          shrink: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Months\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), availableMonths.map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: month,\n          children: month\n        }, month, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        label: \"Day\",\n        value: selectedDay,\n        onChange: e => setSelectedDay(e.target.value),\n        sx: {\n          minWidth: 140\n        },\n        SelectProps: {\n          native: true\n        },\n        disabled: !selectedMonth,\n        InputLabelProps: {\n          shrink: true\n        } // <-- Add this line\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), availableDates.filter(date => date && date.startsWith(selectedMonth)).map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date.split('-')[2]\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        label: \"Completion Status\",\n        value: completionFilter,\n        onChange: e => setCompletionFilter(e.target.value),\n        sx: {\n          minWidth: 140\n        },\n        SelectProps: {\n          native: true,\n          inputProps: {\n            'data-testid': 'status-filter-select' // Changed test ID to target select element\n          }\n        },\n        InputLabelProps: {\n          shrink: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"completed\",\n          disabled: !hasCompleted,\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"incomplete\",\n          disabled: !hasIncomplete,\n          children: \"Incomplete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 0,\n        borderRadius: 2,\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"task-list\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [filteredTasks.map((task, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id.toString(),\n              index: idx,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  sx: {\n                    bgcolor: task.completed ? '#f0f4ff' : '#fff',\n                    borderRadius: 2,\n                    mb: 1,\n                    boxShadow: 0,\n                    transition: 'background 0.2s'\n                  },\n                  secondaryAction: (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id) === task.id ? null : /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"text.secondary\",\n                      sx: {\n                        minWidth: 90\n                      },\n                      children: task.date\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 268,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: \"Edit\",\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        edge: \"end\",\n                        color: \"primary\",\n                        onClick: () => handleEditClick(task),\n                        children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 273,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 272,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 271,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: \"Delete\",\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        edge: \"end\",\n                        color: \"error\",\n                        onClick: () => handleDeleteClick(task.id),\n                        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 278,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 277,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 266,\n                    columnNumber: 31\n                  }, this),\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      cursor: 'grab',\n                      mr: 1\n                    },\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(DragIndicatorIcon, {\n                      color: \"disabled\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 290,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                    edge: \"start\",\n                    checked: task.completed,\n                    onChange: () => handleToggleComplete(task),\n                    color: \"primary\",\n                    disabled: isProcessing || (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id) === task.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 27\n                  }, this), (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id) === task.id ? /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: 1\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(TextField, {\n                        variant: \"standard\",\n                        value: editedTitle,\n                        onChange: e => setEditedTitle(e.target.value),\n                        disabled: isProcessing,\n                        fullWidth: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 303,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                        \"aria-label\": \"check\",\n                        color: \"success\",\n                        onClick: handleSaveEdit,\n                        disabled: isProcessing || !editedTitle.trim(),\n                        sx: {\n                          ml: 1\n                        },\n                        children: /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 317,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 310,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                        \"aria-label\": \"close\",\n                        color: \"error\",\n                        onClick: handleCancelEdit,\n                        disabled: isProcessing,\n                        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 325,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 319,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 302,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 29\n                  }, this) : /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Typography, {\n                      sx: {\n                        textDecoration: task.completed ? 'line-through' : 'none',\n                        color: task.completed ? 'text.secondary' : 'text.primary',\n                        fontWeight: 'normal'\n                      },\n                      children: task.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 333,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 25\n                }, this), idx < sortedTasks.length - 1 && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 58\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 23\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: deleteDialogOpen,\n      onClose: handleCancelDelete,\n      \"aria-labelledby\": \"confirm-delete-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"confirm-delete-title\",\n        children: \"Confirm Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure you want to delete this task?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCancelDelete,\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirmDelete,\n          color: \"error\",\n          autoFocus: true,\n          disabled: isProcessing,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TaskList, \"/vQ04Dxq2eah3lRIVRFe5WyygmA=\");\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","List","ListItem","Checkbox","IconButton","ListItemText","Paper","Typography","Box","Divider","Tooltip","TextField","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","DeleteIcon","EditIcon","CheckIcon","CloseIcon","DragIndicatorIcon","DragDropContext","Droppable","Draggable","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","tasks","onUpdate","onDelete","refetchTasks","selectedMonth","setSelectedMonth","selectedDay","setSelectedDay","completionFilter","setCompletionFilter","_s","editingTask","setEditingTask","editedTitle","setEditedTitle","isProcessing","setIsProcessing","deleteDialogOpen","setDeleteDialogOpen","taskToDelete","setTaskToDelete","availableDates","Array","from","Set","map","t","date","filter","Boolean","sort","availableMonths","slice","handleEditClick","task","title","handleSaveEdit","handleCancelEdit","handleDeleteClick","id","handleConfirmDelete","handleCancelDelete","handleToggleComplete","completed","sortedTasks","a","b","priority","filteredTasks","startsWith","handleDragEnd","result","destination","reordered","removed","splice","source","index","i","length","post","hasCompleted","some","hasIncomplete","elevation","sx","p","borderRadius","mt","children","color","align","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","mb","select","label","value","onChange","e","target","minWidth","SelectProps","native","inputProps","InputLabelProps","shrink","month","disabled","split","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","idx","draggableId","toString","draggableProps","bgcolor","boxShadow","transition","secondaryAction","alignItems","variant","edge","onClick","cursor","mr","dragHandleProps","checked","primary","fullWidth","trim","ml","textDecoration","fontWeight","placeholder","open","onClose","autoFocus","_c","$RefreshReg$"],"sources":["C:/Users/GIGABYTE/todo_app/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Task } from '../models/Task';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Checkbox,\r\n  IconButton,\r\n  ListItemText,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Divider,\r\n  Tooltip,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button,\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';\r\nimport axios from 'axios';\r\n\r\ninterface TaskListProps {\r\n  tasks: Task[];\r\n  onToggle: (task: Task) => Promise<void>;\r\n  onUpdate: (task: Task) => Promise<void>;\r\n  onDelete: (id: number) => Promise<void>;\r\n  refetchTasks: () => void;\r\n  selectedMonth: string;\r\n  setSelectedMonth: (month: string) => void;\r\n  selectedDay: string;\r\n  setSelectedDay: (day: string) => void;\r\n  completionFilter: string;\r\n  setCompletionFilter: (filter: string) => void;\r\n}\r\n\r\nexport const TaskList = ({\r\n  tasks,\r\n  onUpdate,\r\n  onDelete,\r\n  refetchTasks,\r\n  selectedMonth,\r\n  setSelectedMonth,\r\n  selectedDay,\r\n  setSelectedDay,\r\n  completionFilter,\r\n  setCompletionFilter,\r\n}: TaskListProps) => {\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [editedTitle, setEditedTitle] = useState('');\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  // State for delete confirmation dialog\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [taskToDelete, setTaskToDelete] = useState<number | null>(null);\r\n\r\n  const availableDates = Array.from(new Set(tasks.map(t => t.date).filter(Boolean))).sort();\r\n  const availableMonths = Array.from(\r\n    new Set(tasks.map(t => t.date && t.date.slice(0, 7)).filter(Boolean))\r\n  ).sort();\r\n\r\n  const handleEditClick = (task: Task) => {\r\n    setEditingTask(task);\r\n    setEditedTitle(task.title);\r\n  };\r\n\r\n  const handleSaveEdit = async () => {\r\n    if (editingTask) {\r\n      setIsProcessing(true);\r\n      try {\r\n        await onUpdate({ ...editingTask, title: editedTitle });\r\n        setEditingTask(null);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingTask(null);\r\n  };\r\n\r\n  // Open confirmation dialog\r\n  const handleDeleteClick = (id: number) => {\r\n    setTaskToDelete(id);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  // Confirm delete\r\n  const handleConfirmDelete = async () => {\r\n    if (taskToDelete !== null) {\r\n      setIsProcessing(true);\r\n      await onDelete(taskToDelete);\r\n      setIsProcessing(false);\r\n      setTaskToDelete(null);\r\n      setDeleteDialogOpen(false);\r\n    }\r\n  };\r\n\r\n  // Cancel delete\r\n  const handleCancelDelete = () => {\r\n    setTaskToDelete(null);\r\n    setDeleteDialogOpen(false);\r\n  };\r\n\r\n  const handleToggleComplete = async (task: Task) => {\r\n    setIsProcessing(true);\r\n    try {\r\n      await onUpdate({ ...task, completed: !task.completed });\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Sort tasks by priority before rendering\r\n  const sortedTasks = [...tasks].sort((a, b) => a.priority - b.priority);\r\n\r\n  // Filter tasks based on selected month and day\r\n  let filteredTasks = sortedTasks;\r\n  if (selectedMonth) {\r\n    filteredTasks = filteredTasks.filter(t => t.date && t.date.startsWith(selectedMonth));\r\n  }\r\n  if (selectedDay) {\r\n    filteredTasks = filteredTasks.filter(t => t.date === selectedDay);\r\n  }\r\n\r\n  // Filter tasks based on completion status\r\n  if (completionFilter === 'completed') {\r\n    filteredTasks = filteredTasks.filter(t => t.completed);\r\n  } else if (completionFilter === 'incomplete') {\r\n    filteredTasks = filteredTasks.filter(t => !t.completed);\r\n  }\r\n\r\n  // Handle drag end\r\n  const handleDragEnd = async (result: DropResult) => {\r\n    if (!result.destination) return;\r\n    const reordered = Array.from(sortedTasks);\r\n    const [removed] = reordered.splice(result.source.index, 1);\r\n    reordered.splice(result.destination.index, 0, removed);\r\n\r\n    // Update priorities based on new order\r\n    for (let i = 0; i < reordered.length; i++) {\r\n      reordered[i].priority = i;\r\n    }\r\n\r\n    // Persist the new order in the backend\r\n    await axios.post('/api/tasks/reorder', reordered);\r\n\r\n    // Refresh the list\r\n    await refetchTasks();\r\n  };\r\n\r\n  // Count completed and incomplete tasks\r\n  const hasCompleted = sortedTasks.some(t => t.completed);\r\n  const hasIncomplete = sortedTasks.some(t => !t.completed);\r\n\r\n  if (!tasks.length) {\r\n    return (\r\n      <Paper elevation={2} sx={{ p: 3, borderRadius: 2, mt: 2 }}>\r\n        <Typography color=\"text.secondary\" align=\"center\">\r\n          No tasks yet. Add your first task!\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\r\n        <TextField\r\n          select\r\n          label=\"Month\"\r\n          value={selectedMonth}\r\n          onChange={e => {\r\n            setSelectedMonth(e.target.value);\r\n            setSelectedDay('');\r\n          }}\r\n          sx={{ minWidth: 140 }}\r\n          SelectProps={{ \r\n            native: true,\r\n            inputProps: {\r\n              'data-testid': 'month-filter-select' // Changed test ID to target select element\r\n            }\r\n          }}\r\n          InputLabelProps={{ shrink: true }}\r\n        >\r\n          <option value=\"\">All Months</option>\r\n          {availableMonths.map(month => (\r\n            <option key={month} value={month}>\r\n              {month}\r\n            </option>\r\n          ))}\r\n        </TextField>\r\n        <TextField\r\n          select\r\n          label=\"Day\"\r\n          value={selectedDay}\r\n          onChange={e => setSelectedDay(e.target.value)}\r\n          sx={{ minWidth: 140 }}\r\n          SelectProps={{ native: true }}\r\n          disabled={!selectedMonth}\r\n          InputLabelProps={{ shrink: true }} // <-- Add this line\r\n        >\r\n          <option value=\"\">All Days</option>\r\n          {availableDates\r\n            .filter(date => date && date.startsWith(selectedMonth))\r\n            .map(date => (\r\n              <option key={date} value={date}>\r\n                {date.split('-')[2]}\r\n              </option>\r\n            ))}\r\n        </TextField>\r\n        <TextField\r\n          select\r\n          label=\"Completion Status\"\r\n          value={completionFilter}\r\n          onChange={e => setCompletionFilter(e.target.value)}\r\n          sx={{ minWidth: 140 }}\r\n          SelectProps={{ \r\n            native: true,\r\n            inputProps: {\r\n              'data-testid': 'status-filter-select' // Changed test ID to target select element\r\n            }\r\n          }}\r\n          InputLabelProps={{ shrink: true }}\r\n        >\r\n          <option value=\"all\">All Tasks</option>\r\n          <option value=\"completed\" disabled={!hasCompleted}>\r\n            Completed\r\n          </option>\r\n          <option value=\"incomplete\" disabled={!hasIncomplete}>\r\n            Incomplete\r\n          </option>\r\n        </TextField>\r\n      </Box>\r\n      <Paper elevation={2} sx={{ p: 0, borderRadius: 2, mt: 2 }}>\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          <Droppable droppableId=\"task-list\">\r\n            {(provided) => (\r\n              <List ref={provided.innerRef} {...provided.droppableProps}>\r\n                {filteredTasks.map((task, idx) => (\r\n                  <Draggable key={task.id} draggableId={task.id.toString()} index={idx}>\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        // Do NOT spread dragHandleProps here!\r\n                      >\r\n                        <ListItem\r\n                          sx={{\r\n                            bgcolor: task.completed ? '#f0f4ff' : '#fff',\r\n                            borderRadius: 2,\r\n                            mb: 1,\r\n                            boxShadow: 0,\r\n                            transition: 'background 0.2s',\r\n                          }}\r\n                          secondaryAction={\r\n                            editingTask?.id === task.id ? null : (\r\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                {/* Show the date */}\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ minWidth: 90 }}>\r\n                                  {task.date}\r\n                                </Typography>\r\n                                <Tooltip title=\"Edit\">\r\n                                  <IconButton edge=\"end\" color=\"primary\" onClick={() => handleEditClick(task)}>\r\n                                    <EditIcon />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Delete\">\r\n                                  <IconButton edge=\"end\" color=\"error\" onClick={() => handleDeleteClick(task.id!)}>\r\n                                    <DeleteIcon />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                              </Box>\r\n                            )\r\n                          }\r\n                        >\r\n                          {/* Drag handle icon */}\r\n                          <Box\r\n                            sx={{ display: 'flex', alignItems: 'center', cursor: 'grab', mr: 1 }}\r\n                            {...provided.dragHandleProps} // <-- Attach dragHandleProps here\r\n                          >\r\n                            <DragIndicatorIcon color=\"disabled\" />\r\n                          </Box>\r\n                          <Checkbox\r\n                            edge=\"start\"\r\n                            checked={task.completed}\r\n                            onChange={() => handleToggleComplete(task)}\r\n                            color=\"primary\"\r\n                            disabled={isProcessing || editingTask?.id === task.id}\r\n                          />\r\n                          {editingTask?.id === task.id ? (\r\n                            <ListItemText\r\n                              primary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                  <TextField\r\n                                    variant=\"standard\"\r\n                                    value={editedTitle}\r\n                                    onChange={(e) => setEditedTitle(e.target.value)}\r\n                                    disabled={isProcessing}\r\n                                    fullWidth\r\n                                  />\r\n                                  <IconButton\r\n                                    aria-label=\"check\"\r\n                                    color=\"success\"\r\n                                    onClick={handleSaveEdit}\r\n                                    disabled={isProcessing || !editedTitle.trim()}\r\n                                    sx={{ ml: 1 }}\r\n                                  >\r\n                                    <CheckIcon />\r\n                                  </IconButton>\r\n                                  <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"error\"\r\n                                    onClick={handleCancelEdit}\r\n                                    disabled={isProcessing}\r\n                                  >\r\n                                    <CloseIcon />\r\n                                  </IconButton>\r\n                                </Box>\r\n                              }\r\n                            />\r\n                          ) : (\r\n                            <ListItemText\r\n                              primary={\r\n                                <Typography\r\n                                  sx={{\r\n                                    textDecoration: task.completed ? 'line-through' : 'none',\r\n                                    color: task.completed ? 'text.secondary' : 'text.primary',\r\n                                    fontWeight: 'normal',\r\n                                  }}\r\n                                >\r\n                                  {task.title}\r\n                                </Typography>\r\n                              }\r\n                            />\r\n                          )}\r\n                        </ListItem>\r\n                        {idx < sortedTasks.length - 1 && <Divider />} {/* Use sortedTasks here */}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </List>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </Paper>\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={handleCancelDelete}\r\n        aria-labelledby=\"confirm-delete-title\"\r\n      >\r\n        <DialogTitle id=\"confirm-delete-title\">Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete this task?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancelDelete} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleConfirmDelete} color=\"error\" autoFocus disabled={isProcessing}>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}